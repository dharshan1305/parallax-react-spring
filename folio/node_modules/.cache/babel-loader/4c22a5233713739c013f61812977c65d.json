{"ast":null,"code":"var _jsxFileName = \"/home/spectraisdead/Documents/web/folio/src/NodesSpring.js\";\nimport React from 'react';\nimport { Transition, animated, interpolate } from 'react-spring/renderprops';\nimport Node from './Node';\nimport { findCollapsedParent, getTopLeft } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst keyAccessor = n => n.data.name;\n\nfunction Nodes({\n  nodes,\n  layout,\n  orientation,\n  onNodeClick\n}) {\n  return /*#__PURE__*/_jsxDEV(Transition, {\n    native: true,\n    unique: true,\n    items: nodes,\n    keys: keyAccessor,\n    config: {\n      tension: 1000,\n      friction: 130,\n      mass: 5\n    },\n    from: node => {\n      const parentTopLeft = getTopLeft(node.parent || {\n        x: 0,\n        y: 0\n      }, layout, orientation);\n      return {\n        top: parentTopLeft.top,\n        left: parentTopLeft.left,\n        opacity: 0\n      };\n    },\n    enter: node => {\n      const topLeft = getTopLeft(node, layout, orientation);\n      return {\n        top: topLeft.top,\n        left: topLeft.left,\n        opacity: 1\n      };\n    },\n    update: node => {\n      const topLeft = getTopLeft(node, layout, orientation);\n      return {\n        top: topLeft.top,\n        left: topLeft.left,\n        opacity: 1\n      };\n    },\n    leave: node => {\n      const collapsedParent = findCollapsedParent(node.parent);\n      const collapsedParentPrevPos = {\n        x: collapsedParent.data.x0,\n        y: collapsedParent.data.y0\n      };\n      const topLeft = getTopLeft(collapsedParentPrevPos, layout, orientation);\n      return {\n        top: topLeft.top,\n        left: topLeft.left,\n        opacity: 0\n      };\n    },\n    children: node => styles => {\n      const key = keyAccessor(node);\n      return /*#__PURE__*/_jsxDEV(animated.g, {\n        className: \"cx-group\",\n        style: {\n          cursor: 'pointer',\n          pointerEvents: styles.opacity.interpolate(v => v < 0.5 ? 'none' : 'all')\n        },\n        width: 40,\n        height: 20,\n        opacity: styles.opacity,\n        transform: interpolate([styles.left, styles.top], (l, t) => `translate(${l}, ${t})`),\n        children: /*#__PURE__*/_jsxDEV(Node, {\n          node: node,\n          layout: layout,\n          orientation: orientation,\n          onClick: () => onNodeClick(node)\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)\n      }, keyAccessor(node), false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Nodes;\nexport default Nodes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Nodes\");","map":{"version":3,"sources":["/home/spectraisdead/Documents/web/folio/src/NodesSpring.js"],"names":["React","Transition","animated","interpolate","Node","findCollapsedParent","getTopLeft","keyAccessor","n","data","name","Nodes","nodes","layout","orientation","onNodeClick","tension","friction","mass","node","parentTopLeft","parent","x","y","top","left","opacity","topLeft","collapsedParent","collapsedParentPrevPos","x0","y0","styles","key","cursor","pointerEvents","v","l","t"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Transition, animated, interpolate } from 'react-spring/renderprops'\nimport Node from './Node'\nimport { findCollapsedParent, getTopLeft } from './utils'\n\nconst keyAccessor = n => n.data.name\n\nfunction Nodes({ nodes, layout, orientation, onNodeClick }) {\n  return (\n    <Transition\n      native\n      unique\n      items={nodes}\n      keys={keyAccessor}\n      config={{ tension: 1000, friction: 130, mass: 5 }}\n      from={node => {\n        const parentTopLeft = getTopLeft(\n          node.parent || { x: 0, y: 0 },\n          layout,\n          orientation\n        )\n        return {\n          top: parentTopLeft.top,\n          left: parentTopLeft.left,\n          opacity: 0,\n        }\n      }}\n      enter={node => {\n        const topLeft = getTopLeft(node, layout, orientation)\n        return {\n          top: topLeft.top,\n          left: topLeft.left,\n          opacity: 1,\n        }\n      }}\n      update={node => {\n        const topLeft = getTopLeft(node, layout, orientation)\n        return {\n          top: topLeft.top,\n          left: topLeft.left,\n          opacity: 1,\n        }\n      }}\n      leave={node => {\n        const collapsedParent = findCollapsedParent(node.parent)\n        const collapsedParentPrevPos = {\n          x: collapsedParent.data.x0,\n          y: collapsedParent.data.y0,\n        }\n        const topLeft = getTopLeft(collapsedParentPrevPos, layout, orientation)\n        return {\n          top: topLeft.top,\n          left: topLeft.left,\n          opacity: 0,\n        }\n      }}>\n      {node => styles => {\n        const key = keyAccessor(node)\n        return (\n          <animated.g\n            className=\"cx-group\"\n            style={{\n              cursor: 'pointer',\n              pointerEvents: styles.opacity.interpolate(v =>\n                v < 0.5 ? 'none' : 'all'\n              ),\n            }}\n            width={40}\n            height={20}\n            opacity={styles.opacity}\n            transform={interpolate(\n              [styles.left, styles.top],\n              (l, t) => `translate(${l}, ${t})`\n            )}\n            key={keyAccessor(node)}>\n            <Node\n              node={node}\n              layout={layout}\n              orientation={orientation}\n              onClick={() => onNodeClick(node)}\n              key={key}\n            />\n          </animated.g>\n        )\n      }}\n    </Transition>\n  )\n}\n\nexport default Nodes\n"]},"metadata":{},"sourceType":"module"}